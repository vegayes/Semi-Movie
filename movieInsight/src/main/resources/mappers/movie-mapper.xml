<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace = "movieMapper">
	<!-- BoardImage resultMap -->
	
 
	<resultMap type="Movie" id="movie_rm">
		<id property="movieNo" column="MOVIE_NO"/>
		
		<result property="movieTitle" column="MOVIE_TITLE"/>
		<result property="movieImg" column="MOVIE_IMG"/>
		<result property="movieSummary" column="MOVIE_SUMMARY"/>
		<result property="movieGenre" column="MOVIE_GENRE"/>
		<result property="movieReleaseDate" column="MOVIE_RELEASE_DATE"/>
		<result property="movieAge" column="MOVIE_AGE"/>
		<result property="movieRunningTime" column="MOVIE_RUNNING_TIME"/>
		<result property="movieEnrollDate" column="MOVIE_ENROLL_DATE"/>
		<result property="movieDelYN" column="MOVIE_DEL_YN"/>
		<result property="actorNames" column="ACTOR_NAMES"/>
		<result property="directorNames" column="DIRECTOR_NAMES"/>	
		<result property="sumMovieGrade" column="SUM_MOVIE_GRADE"/> <!-- 이거 주의 !!!  -->
		
		<result property="movieCommentNo" column="MOVIE_EV_NO"/>
		<result property="movieCommentContent" column="EVALUATION_CONTENT"/>
		<result property="movieCommentDate" column="MOVIE_EV_ENROLL_DATE"/>
		<result property="movieGrade" column="MOVIE_GRADE"/>
		
		<result property="commentMovieWriter" column="COMMENT_MOVIE_WRITER"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="writerProfile" column="COMMENT_MEMBER_PROFILE"/>
		<result property="movieCommentDelYN" column="MOVIE_EV_DEL_YN"/>
		
	</resultMap>
	
	
		
	<resultMap type="Cinema" id="cinema_rm">
		<id property="cinemaNo" column="CINEMA_NO" />

		<result property="cinemaName" column="CINEMA_NAME" />
		<result property="cinemaAddress" column="CINEMA_ADDRESS" />
		<result property="cinemaContact" column="CINEMA_CONTACT" />
		<result property="cinemaImg" column="CINEMA_IMG" />
		<result property="cinemaLink" column="CINEMA_LINK" />
		<result property="cinemaMaxInclude" column="CINEMA_MAX_INCLUDE" />
		<result property="cinemaDelYN" column="CINEMA_DEL_YN" />
		<result property="cinemaSpecialHall" column="CINEMA_SPECIAL_HALL" />

		<result property="cinemaType" column="CINEMA_TYPE" />
		
	</resultMap>
	

	<!-- CDATA 태그 : 해당 태그 내부에 작성된 것은 모두 문자로 취급 -->

	<!--Search 1) 검색 결과 리스트 -->
	<select id = "searchMovieList" resultMap = "movie_rm">
	SELECT * 
	FROM (
		SELECT
	    M.MOVIE_NO,
	    M.MOVIE_TITLE,
	    M.MOVIE_IMG,
	    M.MOVIE_SUMMARY,
	    M.MOVIE_GENRE,
	    TO_CHAR(M.MOVIE_RELEASE_DATE, 'YYYY"년" MM"월" DD"일"') AS MOVIE_RELEASE_DATE,
	    M.MOVIE_AGE,
	    M.MOVIE_RUNNING_TIME,
	    LISTAGG(CASE WHEN C.CASTING_CATEGORY = 'A' THEN C.CASTING_NAME ELSE NULL END, ' / ') WITHIN GROUP (ORDER BY C.CASTING_NAME) AS ACTOR_NAMES,
	    LISTAGG(CASE WHEN C.CASTING_CATEGORY = 'D' THEN C.CASTING_NAME ELSE NULL END, ' / ') WITHIN GROUP (ORDER BY C.CASTING_NAME) AS DIRECTOR_NAMES,
	    M.MOVIE_DEL_YN
		FROM MOVIE M
		JOIN MOVIE_CASTING MC ON M.MOVIE_NO = MC.MOVIE_NO
		JOIN CASTING C ON MC.CASTING_NO = C.CASTING_NO
		GROUP BY M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_IMG, M.MOVIE_SUMMARY, M.MOVIE_GENRE, M.MOVIE_RELEASE_DATE, M.MOVIE_AGE, M.MOVIE_RUNNING_TIME, M.MOVIE_DEL_YN)
	WHERE MOVIE_DEL_YN = 'N' AND (MOVIE_TITLE LIKE '%' || #{movieQuery} || '%' OR MOVIE_GENRE LIKE '%' || #{movieQuery} || '%' OR ACTOR_NAMES LIKE '%' || #{movieQuery} || '%' OR DIRECTOR_NAMES LIKE '%' || #{movieQuery} || '%')	
	</select>


<!-- 영화 상세 설명 -->


	<!-- 1) 검색 결과  -->
	<select id = "selectMovie"  resultMap = "movie_rm">
		SELECT * 
		FROM (
			SELECT
		    M.MOVIE_NO,
		    M.MOVIE_TITLE,
		    M.MOVIE_IMG,
		    M.MOVIE_SUMMARY,
		    M.MOVIE_GENRE,
		    TO_CHAR(M.MOVIE_RELEASE_DATE, 'YYYY"년" MM"월" DD"일"') AS MOVIE_RELEASE_DATE,
		    M.MOVIE_AGE,
		    M.MOVIE_RUNNING_TIME,
		    M.MOVIE_DEL_YN
			FROM MOVIE M
			JOIN MOVIE_CASTING MC ON M.MOVIE_NO = MC.MOVIE_NO
			GROUP BY M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_IMG, M.MOVIE_SUMMARY, M.MOVIE_GENRE, M.MOVIE_RELEASE_DATE, M.MOVIE_AGE, M.MOVIE_RUNNING_TIME, M.MOVIE_DEL_YN)
		WHERE MOVIE_DEL_YN = 'N' AND MOVIE_NO = #{movieNo}		
	</select>


	<!-- 2) 배우 정보 검색 결과  -->
	<select id = "actorInfoList" resultType = "map">
		SELECT CASTING_NAME, CASTING_URL
		FROM MOVIE M
		JOIN MOVIE_CASTING MC ON M.MOVIE_NO = MC.MOVIE_NO
		JOIN CASTING C ON MC.CASTING_NO = C.CASTING_NO
		WHERE CASTING_CATEGORY = 'A' AND M.MOVIE_NO = #{movieNo}
	</select>
	
	<!--  3) 감독 정보 검색 결과 -->
	<select id = "directorInfoList" resultType = "map">
		SELECT CASTING_NAME, CASTING_URL
		FROM MOVIE M
		JOIN MOVIE_CASTING MC ON M.MOVIE_NO = MC.MOVIE_NO
		JOIN CASTING C ON MC.CASTING_NO = C.CASTING_NO
		WHERE CASTING_CATEGORY = 'D' AND M.MOVIE_NO = #{movieNo}
	</select>
	
	
	<!-- 4) 영화를 상영하는 상영관 리스트 가져오기 -->
	<select id ="selectCinemaList" resultMap = "cinema_rm">
	SELECT DISTINCT CINEMA_NO, CINEMA_NAME, CINEMA_ADDRESS, CINEMA_IMG, CINEMA_LINK, CINEMA_TYPE
	FROM CINEMA 
	JOIN MOVIE_STATUS USING(CINEMA_NO) 
	WHERE CINEMA_NO IN (SELECT CINEMA_NO
						FROM MOVIE_STATUS ms
						WHERE MOVIE_NO = #{movieNo})	
	</select>
	
	
	<!-- 5) 해당 영화와 비슷한 (장르기준) 추천  -->
	<!-- 
	<select id ="recommendMovie" resultMap = "movie_rm">
	SELECT MOVIE_NO, MOVIE_TITLE, MOVIE_IMG
	FROM (SELECT *
			FROM MOVIE 
			WHERE MOVIE_DEL_YN ='N'AND MOVIE_GENRE = #{movieGenre} 
			ORDER BY DBMS_RANDOM.VALUE)
	<![CDATA[WHERE ROWNUM <= 10]]>
	</select>
	 -->
	 <!--  
	 <select id = "recommendMovie" resultMap = "movie_rm">
	 	SELECT DISTINCT MOVIE_NO, MOVIE_TITLE, MOVIE_IMG
		FROM (<foreach  collection="list"  item = "genre" separator = "UNION ">
				SELECT MOVIE_NO, MOVIE_TITLE, MOVIE_IMG, MOVIE_GENRE 
				FROM MOVIE 
				WHERE MOVIE_DEL_YN ='N'AND MOVIE_GENRE LIKE '%' || #{genre} || '%' 
   			 </foreach >)
   		ORDER BY DBMS_RANDOM.VALUE
		FETCH FIRST 10 ROWS ONLY   	
	 </select>
-->
	
	 <select id = "recommendMovie" resultMap = "movie_rm">
	 	SELECT DISTINCT *
		FROM (
			<foreach  collection="genreList"  item = "value" separator = "UNION ">
				SELECT MOVIE_NO, MOVIE_TITLE, MOVIE_IMG, MOVIE_GENRE 
				FROM MOVIE 
				WHERE MOVIE_DEL_YN ='N'
				AND MOVIE_GENRE LIKE '%' || #{value} || '%' 
   			 </foreach >
   			 )
   		WHERE MOVIE_NO != ${movieNo}
   		ORDER BY DBMS_RANDOM.VALUE
		FETCH FIRST 10 ROWS ONLY   	
	 </select>
	
	
	<!-- 관리자-영화 페이지에서 영화 목록 조회 -->
	<select id="selectManagerMovieList" resultMap = "movie_rm">
	SELECT 
	    m.MOVIE_NO,
	    m.MOVIE_TITLE,
	    m.MOVIE_GENRE,
	    NVL(ROUND(AVG(me.MOVIE_GRADE), 1), 0) AS MOVIE_GRADE, 
	    m.MOVIE_RUNNING_TIME
	FROM 
	    Movie m 
	LEFT JOIN 
	    MOVIE_EVALUATION me ON m.MOVIE_NO = me.MOVIE_NO
	WHERE 
	    m.MOVIE_DEL_YN = 'N'
	GROUP BY 
	    m.MOVIE_NO, m.MOVIE_TITLE, m.MOVIE_GENRE, m.MOVIE_RUNNING_TIME
	</select>
	

	
	<update id="deleteMovie">
  		UPDATE MOVIE m  
		SET MOVIE_DEL_YN  = 'Y'
		WHERE MOVIE_NO = #{movieNo}
  	</update>
	
	
	<insert id="insertMovie">
		INSERT INTO MOVIE m 
		VALUES(SEQ_MOVIE_NO.NEXTVAL,#{movieTitle},#{movieImg},#{movieSummary},#{movieGenre}
		,#{movieReleaseDate},#{movieAge},#{movieRunningTime},DEFAULT,DEFAULT)
	</insert>
	
	<insert id="insertMovieStatus" parameterType="java.util.Map">
		INSERT INTO MOVIE_STATUS (MOVIE_STATUS_NO, MOVIE_NO, CINEMA_NO, CINEMA_TYPE)
	    SELECT SEQ_MOVIE_STATUS_NO.NEXTVAL, A.MOVIE_NO, A.CINEMA_NO, A.CINEMA_TYPE
	    FROM (
	        <foreach collection="cinemaList" item="cinema" separator=" UNION ALL ">
	            SELECT #{insertMovieNo} as MOVIE_NO, #{cinema.cinemaNo} as CINEMA_NO, #{cinema.cinemaType} as CINEMA_TYPE
	            FROM DUAL
	        </foreach>
	    ) A
	</insert>
	
	
	
	<update id="updateMovie">
		UPDATE MOVIE 
	    SET MOVIE_TITLE = #{movieTitle}, MOVIE_SUMMARY =#{movieSummary}, 
	    MOVIE_GENRE = #{movieGenre}, MOVIE_AGE = #{movieAge}, MOVIE_RUNNING_TIME = #{movieRunningTime}
	    WHERE MOVIE_NO = #{movieNo}
	</update>	
	
	<select id="selectMovieNo"  resultType = "_integer">
		SELECT MOVIE_NO 
		FROM MOVIE
		WHERE MOVIE_TITLE = #{movieTitle}
		AND MOVIE_DEL_YN = 'N'
	</select>
	
	
	<select id="selectCastingNo"  resultType = "_integer">
		SELECT CASTING_NO
		FROM (
			<foreach  collection="list"  item = "value" separator = "UNION">
				SELECT CASTING_NO 
				FROM CASTING
				WHERE CASTING_NAME = #{value}
			</foreach>
		)
	</select>
	
	
	<!-- 감독,배우,영화-캐스팅 테이블에 insert 구문 -->
	
	<insert id="insertDirectors" parameterType="java.util.List">
    	INSERT INTO CASTING (CASTING_NO, CASTING_NAME, CASTING_URL, CASTING_CATEGORY)
	    SELECT SEQ_CASTING_NO.NEXTVAL, A.CASTING_NAME, A.CASTING_URL, A.CASTING_CATEGORY 
	    FROM (
	        <foreach collection="list" item="directorNamesList" separator=" UNION ALL ">
	            SELECT #{directorNamesList} as CASTING_NAME, 'https://namu.wiki/w/' || #{directorNamesList} as CASTING_URL, 'D' as CASTING_CATEGORY
	            FROM DUAL
	        </foreach>
	    ) A
	</insert>
	
	
	<insert id="insertActors" parameterType="java.util.List">
    	INSERT INTO CASTING (CASTING_NO, CASTING_NAME, CASTING_URL, CASTING_CATEGORY)
	    SELECT SEQ_CASTING_NO.NEXTVAL, A.CASTING_NAME, A.CASTING_URL, A.CASTING_CATEGORY 
	    FROM (
	        <foreach collection="list" item="actorNamesList" separator=" UNION ALL ">
	            SELECT #{actorNamesList} as CASTING_NAME, 'https://namu.wiki/w/' || #{actorNamesList} as CASTING_URL, 'A' as CASTING_CATEGORY
	            FROM DUAL
	        </foreach>
	    ) A
	</insert>


	<insert id="insertMovieCasting" parameterType="java.util.Map">
    	INSERT INTO MOVIE_CASTING (MOVIE_CASTING_NO, MOVIE_NO, CASTING_NO)
	    SELECT SEQ_MOVIE_CASTING_NO.NEXTVAL, A.MOVIE_NO, A.CASTING_NO
	    FROM (
	        <foreach collection="castingNo" item="casting" separator=" UNION ALL ">
	            SELECT #{movieNo} as MOVIE_NO, #{casting} as CASTING_NO
	            FROM DUAL
	        </foreach>
	    ) A
	</insert>

	
	<!-- ============================ 댓글 =========================================== -->
	
	<!-- 영화 댓글 조회  -->
	<select id = "commentMovieList" resultMap = "movie_rm">
		SELECT MOVIE_EV_NO, MEMBER_ID AS "COMMENT_MOVIE_WRITER", EVALUATION_CONTENT, TO_CHAR(MOVIE_EV_ENROLL_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') MOVIE_EV_ENROLL_DATE, MOVIE_GRADE, MEMBER_PROFILE AS COMMENT_MEMBER_PROFILE 
		FROM MOVIE_EVALUATION 
		JOIN MOVIE USING(MOVIE_NO)
		JOIN MEMBER USING(MEMBER_NO)
		WHERE MOVIE_DEL_YN ='N' AND MOVIE_EV_DEL_YN = 'N' AND MOVIE_NO = #{movieNo}
		ORDER BY MOVIE_EV_ENROLL_DATE DESC
	</select>

	<!--  댓글 삽입 -->
	<insert id = "commentInsert">
		INSERT INTO "MOVIE_EVALUATION"
		VALUES(SEQ_MOVIE_EV_NO.NEXTVAL, 
				#{movieCommentContent},
				SYSDATE,
				#{movieGrade},
				DEFAULT,
				#{memberNo},
				#{movieNo})
	</insert>
	
	<!--  댓글 삭제 -->
	<update id ="commentDelete">
		UPDATE MOVIE_EVALUATION 
		SET MOVIE_EV_DEL_YN = 'Y'
		WHERE MOVIE_EV_NO = #{movieCommentNo}
	</update>
	
	
	<!--  댓글 수정 -->
	<update id="updateComment">
		UPDATE MOVIE_EVALUATION 
		SET EVALUATION_CONTENT = #{movieCommentContent},
			MOVIE_EV_ENROLL_DATE = SYSDATE				
		WHERE MOVIE_EV_NO = #{movieCommentNo}
	</update>
	
	
	<!-- 즐겨찾기 ON -->
	<insert id = "addFavorite">
		INSERT INTO MOVIE_LIKE 
		VALUES(SEQ_MOVIE_LIKE_NO.NEXTVAL, DEFAULT, #{memberNo}, #{movieNo}, SYSDATE)	
	</insert>

	<!-- 즐겨찾기 OFF -->
	<delete id = "delFavorite">
		DELETE FROM MOVIE_LIKE
		WHERE MOVIE_NO = #{movieNo} 
		AND  MEMBER_NO = #{memberNo}
	</delete>
	
	<!-- 즐겨찾기 조회 -->
	<select id = "favoriteCheck" resultType = "_int">
	SELECT COUNT(*)
	FROM MOVIE_LIKE 
	WHERE MOVIE_NO = #{movieNo}  AND MEMBER_NO = #{memberNo}
	</select>

	<!-- 장르에 따른 영화 조회 -->
	<select id="findMoviesByCategory" resultMap="movie_rm">
		SELECT MOVIE_NO, MOVIE_TITLE , MOVIE_IMG ,MOVIE_GENRE 
		FROM MOVIE m 
		WHERE MOVIE_GENRE LIKE '%' || #{category} || '%' AND MOVIE_DEL_YN  ='N'
	</select>
	
	<!-- 영화에 대한 총 평점 계산 -->
	<select id = "sumMovieGrade" resultType = "_float">
		SELECT NVL(ROUND(AVG(MOVIE_GRADE), 1), 0) AS SUM_MOVIE_GRADE
		FROM MOVIE_EVALUATION
		WHERE MOVIE_EV_DEL_YN = 'N' AND MOVIE_NO = #{movieNo}
		GROUP BY MOVIE_NO
	</select>



	<!-- 회원 번호에 해당하는 영화 댓글목록 조회 -->
	<select id="selectMovieComment" resultMap = "movie_rm" >
		SELECT *
		FROM MOVIE_EVALUATION me
		WHERE MEMBER_NO = #{memberNo}
	</select>


	<!-- 헤더 '인기순' 누를 시 평점 기준으로 값 가져오기 -->
	<select id = "orderByPopular" resultMap = "movie_rm">
		WITH TOP AS (
	    SELECT NVL(ROUND(AVG(MOVIE_GRADE), 1), 0) AS AVG_GRADE, MOVIE_NO
	    FROM MOVIE_EVALUATION
	    LEFT JOIN MOVIE USING(MOVIE_NO)
	    WHERE MOVIE_EV_DEL_YN = 'N' AND MOVIE_DEL_YN = 'N'
	    GROUP BY MOVIE_NO
	    ORDER BY AVG_GRADE DESC
	    FETCH FIRST 10 ROWS ONLY
		)
		SELECT M.*
		FROM (
		    SELECT 
		        M.MOVIE_NO,
		        M.MOVIE_TITLE,
		        M.MOVIE_IMG,
		        M.MOVIE_SUMMARY,
		        M.MOVIE_GENRE,
		        TO_CHAR(M.MOVIE_RELEASE_DATE, 'YYYY"년" MM"월" DD"일"') AS MOVIE_RELEASE_DATE,
		        M.MOVIE_AGE,
		        M.MOVIE_RUNNING_TIME,
		        LISTAGG(CASE WHEN C.CASTING_CATEGORY = 'A' THEN C.CASTING_NAME ELSE NULL END, ' / ') WITHIN GROUP (ORDER BY C.CASTING_NAME) AS ACTOR_NAMES,
		        LISTAGG(CASE WHEN C.CASTING_CATEGORY = 'D' THEN C.CASTING_NAME ELSE NULL END, ' / ') WITHIN GROUP (ORDER BY C.CASTING_NAME) AS DIRECTOR_NAMES,
		        M.MOVIE_DEL_YN
		    FROM MOVIE M
		    JOIN MOVIE_CASTING MC ON M.MOVIE_NO = MC.MOVIE_NO
		    JOIN CASTING C ON MC.CASTING_NO = C.CASTING_NO
		    WHERE M.MOVIE_DEL_YN = 'N'
		    GROUP BY M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_IMG, M.MOVIE_SUMMARY, M.MOVIE_GENRE, M.MOVIE_RELEASE_DATE, M.MOVIE_AGE, M.MOVIE_RUNNING_TIME, M.MOVIE_DEL_YN
		) M
		JOIN TOP T ON M.MOVIE_NO = T.MOVIE_NO
	</select>


	<!-- 최신순 정렬 -->
	<select id = "orderByLatest" resultMap = "movie_rm">
		WITH LATEST AS (
		SELECT MOVIE_RELEASE_DATE  , MOVIE_NO
		FROM MOVIE 
		WHERE MOVIE_DEL_YN ='N'
		ORDER BY MOVIE_RELEASE_DATE DESC 
		FETCH FIRST 10 ROWS ONLY
		)
		SELECT M.*
		FROM (
		    SELECT 
		        M.MOVIE_NO,
		        M.MOVIE_TITLE,
		        M.MOVIE_IMG,
		        M.MOVIE_SUMMARY,
		        M.MOVIE_GENRE,
		        TO_CHAR(M.MOVIE_RELEASE_DATE, 'YYYY"년" MM"월" DD"일"') AS MOVIE_RELEASE_DATE,
		        M.MOVIE_AGE,
		        M.MOVIE_RUNNING_TIME,
		        LISTAGG(CASE WHEN C.CASTING_CATEGORY = 'A' THEN C.CASTING_NAME ELSE NULL END, ' / ') WITHIN GROUP (ORDER BY C.CASTING_NAME) AS ACTOR_NAMES,
		        LISTAGG(CASE WHEN C.CASTING_CATEGORY = 'D' THEN C.CASTING_NAME ELSE NULL END, ' / ') WITHIN GROUP (ORDER BY C.CASTING_NAME) AS DIRECTOR_NAMES,
		        M.MOVIE_DEL_YN
		    FROM MOVIE M
		    JOIN MOVIE_CASTING MC ON M.MOVIE_NO = MC.MOVIE_NO
		    JOIN CASTING C ON MC.CASTING_NO = C.CASTING_NO
		    WHERE M.MOVIE_DEL_YN = 'N'
		    GROUP BY M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_IMG, M.MOVIE_SUMMARY, M.MOVIE_GENRE, M.MOVIE_RELEASE_DATE, M.MOVIE_AGE, M.MOVIE_RUNNING_TIME, M.MOVIE_DEL_YN
		) M
		JOIN LATEST L ON M.MOVIE_NO = L.MOVIE_NO 
	</select>

	<!--  장르별 랜덤하게 뽑기  -->
	<select id = "orderByGenre" resultMap = "movie_rm">
		WITH GENRE AS (
		SELECT MOVIE_NO 
		FROM MOVIE 
		WHERE MOVIE_DEL_YN = 'N' AND MOVIE_GENRE LIKE '%' || #{randomGenre}|| '%'
		FETCH FIRST 10 ROWS ONLY
		)
		SELECT M.*
		FROM (
		    SELECT 
		        M.MOVIE_NO,
		        M.MOVIE_TITLE,
		        M.MOVIE_IMG,
		        M.MOVIE_SUMMARY,
		        M.MOVIE_GENRE,
		        TO_CHAR(M.MOVIE_RELEASE_DATE, 'YYYY"년" MM"월" DD"일"') AS MOVIE_RELEASE_DATE,
		        M.MOVIE_AGE,
		        M.MOVIE_RUNNING_TIME,
		        LISTAGG(CASE WHEN C.CASTING_CATEGORY = 'A' THEN C.CASTING_NAME ELSE NULL END, ' / ') WITHIN GROUP (ORDER BY C.CASTING_NAME) AS ACTOR_NAMES,
		        LISTAGG(CASE WHEN C.CASTING_CATEGORY = 'D' THEN C.CASTING_NAME ELSE NULL END, ' / ') WITHIN GROUP (ORDER BY C.CASTING_NAME) AS DIRECTOR_NAMES,
		        M.MOVIE_DEL_YN
		    FROM MOVIE M
		    JOIN MOVIE_CASTING MC ON M.MOVIE_NO = MC.MOVIE_NO
		    JOIN CASTING C ON MC.CASTING_NO = C.CASTING_NO
		    WHERE M.MOVIE_DEL_YN = 'N'
		    GROUP BY M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_IMG, M.MOVIE_SUMMARY, M.MOVIE_GENRE, M.MOVIE_RELEASE_DATE, M.MOVIE_AGE, M.MOVIE_RUNNING_TIME, M.MOVIE_DEL_YN
		) M
		JOIN GENRE G ON M.MOVIE_NO = G.MOVIE_NO 
	</select>

	<!-- user가 어떤거에 관심있는지 뽑기  -->
	<select id = "genreList" resultType = "string">
		SELECT
		DISTINCT TRIM(REGEXP_SUBSTR(MOVIE_GENRE, '[^/]+', 1, LEVEL)) AS GENRE
		FROM (
		    SELECT MOVIE_GENRE, MOVIE_NO
		    FROM VISIT
		    LEFT JOIN MOVIE USING(MOVIE_NO)
		    WHERE MEMBER_NO = #{memberNo}
		    UNION ALL
		    SELECT MOVIE_GENRE, MOVIE_NO
		    FROM MOVIE_LIKE 
		    LEFT JOIN MOVIE USING(MOVIE_NO)
		    WHERE MEMBER_NO = #{memberNo}
		) combined_result
        <![CDATA[
		CONNECT BY LEVEL <= REGEXP_COUNT(MOVIE_GENRE, '/') + 1
		 ]]>
	</select>
	
	<!-- 관심있는게 있으면 그거 기준으로 뽑기  -->
	<select id = "genreUser" resultMap = "movie_rm">
		SELECT MOVIE_NO, MOVIE_TITLE, MOVIE_GENRE, MOVIE_IMG
		FROM (
		    SELECT MOVIE_NO, MOVIE_TITLE, MOVIE_GENRE, MOVIE_IMG
		    FROM MOVIE
		    WHERE MOVIE_GENRE LIKE '%' || #{randomGenre} || '%'
		    AND MOVIE_DEL_YN ='N'
		    ORDER BY DBMS_RANDOM.VALUE
		)
		<![CDATA[
		WHERE ROWNUM <= 5
		]]>
	</select>
	
	<!-- 아무거나 랜덤하게 뽑기 -->
	<select id = "random" resultMap = "movie_rm">
		SELECT MOVIE_NO, MOVIE_TITLE, MOVIE_GENRE, MOVIE_IMG
		FROM (
		    SELECT MOVIE_NO, MOVIE_TITLE, MOVIE_GENRE, MOVIE_IMG
		    FROM MOVIE
		    WHERE MOVIE_DEL_YN ='N'
		    ORDER BY DBMS_RANDOM.VALUE
		)
		<![CDATA[
		WHERE ROWNUM <= 10
		]]>
	</select>

	

</mapper>


