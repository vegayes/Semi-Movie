<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace = "cinemaMapper">
	
	
	<resultMap type="Cinema" id="cinema_rm">
		
		<!-- 자바의 변수와 DB의 컬럼을 매핑해줌 -> 조회 결과 자동으로 저장 -->
		<!-- DB의 기본 키(PK, 복합키면 여러 개 작성) -->
		<id property="cinemaNo" column="CINEMA_NO" />

		<!-- DB의 일반 컬럼들 -->
		<result property="cinemaName" column="CINEMA_NAME" />
		<result property="cinemaAddress" column="CINEMA_ADDRESS" />
		<result property="cinemaContact" column="CINEMA_CONTACT" />
		<result property="cinemaImg" column="CINEMA_IMG" />
		<result property="cinemaLink" column="CINEMA_LINK" />
		<result property="cinemaMaxInclude" column="CINEMA_MAX_INCLUDE" />
		<result property="cinemaDelYN" column="CINEMA_DEL_YN" />
		<result property="cinemaSpecialHall" column="CINEMA_SPECIAL_HALL" />
		<result property="sumCinemaGrade" column="SUM_CINEMA_GRADE"/>
		
		<result property="cinemaCommentNo" column="CINEMA_EV_NO"/>
		<result property="cinemaCommentContent" column="CINEMA_COMMENT"/>
		<result property="cinemaCommentDate" column="CINEMA_EV_ENROLL_DATE"/>
		<result property="cinemaGrade" column="CINEMA_GRADE"/>
		<result property="cinemaCommentType" column="CINEMA_COMMENT_TYPE"/>
		
		

		<result property="cinemaType" column="CINEMA_TYPE" />
		

		<result property="commentCinemaWriter" column="COMMENT_CINEMA_WRITER"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="writerProfile" column="COMMENT_MEMBER_PROFILE"/>

	</resultMap>



	<resultMap type="Movie" id="movie_rm">
		<id property="movieNo" column="MOVIE_NO"/>
		
		<result property="movieTitle" column="MOVIE_TITLE"/>
		<result property="movieImg" column="MOVIE_IMG"/>
		<result property="movieSummary" column="MOVIE_SUMMARY"/>
		<result property="movieGenre" column="MOVIE_GENRE"/>
		<result property="movieReleaseDate" column="MOVIE_RELEASE_DATE"/>
		<result property="movieAge" column="MOVIE_AGE"/>
		<result property="movieRunningTime" column="MOVIE_RUNNING_TIME"/>
		<result property="movieEnrollDate" column="MOVIE_ENROLL_DATE"/>
		<result property="movieDelYN" column="MOVIE_DEL_YN"/>
		<result property="actorNames" column="ACTOR_NAMES"/>
		<result property="directorNames" column="DIRECTOR_NAMES"/>


		<result property="movieCommentNo" column="MOVIE_EV_NO"/>
		<result property="movieCommentContent" column="EVALUATION_CONTENT"/>
		<result property="movieCommentDate" column="MOVIE_EV_ENROLL_DATE"/>
		<result property="movieGrade" column="MOVIE_GRADE"/>

		<result property="commentMovieWriter" column="COMMENT_MOVIE_WRITER"/>

	</resultMap>



	<!-- 영화관 정보 얻어오기 -->
	<select id="selectCinemaInfo" parameterType="Cinema" resultMap="cinema_rm">
  		SELECT CINEMA_NO, CINEMA_NAME, CINEMA_ADDRESS, CINEMA_CONTACT,
		CINEMA_IMG, CINEMA_LINK, CINEMA_MAX_INCLUDE, CINEMA_DEL_YN, CINEMA_SPECIAL_HALL
		FROM "CINEMA"
		WHERE CINEMA_DEL_YN = 'N'
		AND CINEMA_NAME = #{cinemaName}
  	</select>
  	
  	
  	
  	<!-- 2) 검색한 영화관 결과 리스트 가져오기 --> 
  	<!--  특별관, 평점 아직 못 가져옴 -->
  	<select id = "searchCinemaList" resultMap="cinema_rm">
  		SELECT CINEMA_NO, CINEMA_NAME, CINEMA_ADDRESS, CINEMA_CONTACT,
			CINEMA_IMG, CINEMA_LINK, CINEMA_MAX_INCLUDE,  CINEMA_SPECIAL_HALL
		FROM "CINEMA"
		LEFT JOIN MOVIE_STATUS USING(CINEMA_NO)
		WHERE CINEMA_DEL_YN = 'N'  AND (CINEMA_TYPE ='C' OR CINEMA_TYPE IS NULL) AND CINEMA_ADDRESS IS NOT NULL 
		AND (CINEMA_NAME LIKE '%' || #{cinemaQuery} || '%'  OR CINEMA_ADDRESS LIKE '%' || #{cinemaQuery} || '% ' ) 
  	</select>

  	<!--  
  	<select id="selectMovieList" parameterType="Movie" resultMap="movie_rm">
  		SELECT * FROM MOVIE m 
		WHERE MOVIE_NO = 
		(
		SELECT MOVIE_NO FROM MOVIE_STATUS
		WHERE CINEMA_NO = #{cinemaNo}
		)
  	</select>
  	-->
  	
  	<!-- 영화관에서 상영중인 영화 목록 가져오기 -->
  	<select id="selectMovieList" parameterType="Movie" resultMap="movie_rm">
	  	SELECT * 
		FROM (
			SELECT
				TO_CHAR(M.MOVIE_RELEASE_DATE,'YYYY-MM-DD'),
			    M.MOVIE_NO,
			    M.MOVIE_TITLE,
			    M.MOVIE_IMG,
			    M.MOVIE_GENRE,
			    M.MOVIE_AGE,
			    M.MOVIE_RUNNING_TIME,
			    M.MOVIE_DEL_YN,
			    LISTAGG(CASE WHEN C.CASTING_CATEGORY = 'A' THEN C.CASTING_NAME ELSE NULL END, ' / ')
			    WITHIN GROUP (ORDER BY C.CASTING_NAME) AS ACTOR_NAMES
			FROM MOVIE M
				JOIN MOVIE_CASTING MC ON M.MOVIE_NO = MC.MOVIE_NO
				JOIN CASTING C ON MC.CASTING_NO = C.CASTING_NO
				GROUP BY M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_IMG, M.MOVIE_SUMMARY, M.MOVIE_GENRE, 
				M.MOVIE_RELEASE_DATE, M.MOVIE_AGE, M.MOVIE_RUNNING_TIME, M.MOVIE_DEL_YN)
		WHERE MOVIE_NO = (SELECT MOVIE_NO FROM MOVIE_STATUS WHERE CINEMA_NO = #{cinemaNo})
		AND MOVIE_DEL_YN = 'N'
  	</select>
  	
  	
  	
  	
  	<select id="selectManagerCinemaList" parameterType="Cinema" resultMap="cinema_rm" >
	 SELECT 
	    c.CINEMA_NO,
	    c.CINEMA_NAME,
	    c.CINEMA_ADDRESS,
	    NVL(ROUND(AVG(ce.CINEMA_GRADE), 1), 0) AS CINEMA_GRADE, 
	    c.CINEMA_MAX_INCLUDE
	FROM 
	    CINEMA c 
	LEFT JOIN 
	    CINEMA_EVALUATION ce ON c.CINEMA_NO = ce.CINEMA_NO
	WHERE 
	    c.CINEMA_DEL_YN = 'N'
	GROUP BY 
	    c.CINEMA_NO, c.CINEMA_NAME, c.CINEMA_ADDRESS, c.CINEMA_MAX_INCLUDE
  	</select>
  	
  	
  	
  	
  	<update id="deleteCinema">
  	
  		UPDATE CINEMA c  
		SET CINEMA_DEL_YN  = 'Y'
		WHERE CINEMA_NO = #{cinemaNo}
  		
  	</update>
  	

  	<update id="updateCinema">
  	
  		UPDATE CINEMA SET 
			 CINEMA_NAME = #{cinemaName},
			 CINEMA_ADDRESS = #{cinemaAddress},
			 CINEMA_CONTACT = #{cinemaContact},
			 CINEMA_LINK = #{cinemaLink},
			 CINEMA_MAX_INCLUDE = #{cinemaMaxInclude}
		WHERE CINEMA_NO = #{cinemaNo}

  	</update>
  
  	<update id="updateCinemaImg">
  	
  		UPDATE CINEMA SET 
			 CINEMA_NAME = #{cinemaName},
			 CINEMA_ADDRESS = #{cinemaAddress},
			 CINEMA_CONTACT = #{cinemaContact},
			 CINEMA_IMG = #{cinemaImg},
			 CINEMA_LINK = #{cinemaLink},
			 CINEMA_MAX_INCLUDE = #{cinemaMaxInclude}
		WHERE CINEMA_NO = #{cinemaNo}
  	
  	</update>
  	
  	<insert id="insertCinema">
  	
	  	INSERT INTO CINEMA c 
		VALUES(SEQ_CINEMA_NO.NEXTVAL,#{cinemaName},#{cinemaAddress}, #{cinemaContact}, 
		#{cinemaImg}, #{cinemaLink}, #{cinemaMaxInclude},DEFAULT, #{cinemaSpecialHall})
  	
  	</insert>

	<!-- ============================ 댓글 =========================================== -->
	<!-- 영화관 댓글 조회 -->
	<select id = "commentCinemaList" resultMap = "cinema_rm">
	SELECT CINEMA_EV_NO, CINEMA_NO, MEMBER_ID AS "COMMENT_CINEMA_WRITER", EVALUATION_TYPE AS CINEMA_COMMENT_TYPE , CINEMA_COMMENT, CINEMA_NAME,
		TO_CHAR(CINEMA_EV_ENROLL_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') CINEMA_EV_ENROLL_DATE, CINEMA_GRADE, MEMBER_PROFILE AS COMMENT_MEMBER_PROFILE 
	FROM CINEMA_EVALUATION 
	JOIN CINEMA USING(CINEMA_NO)
	JOIN MEMBER USING(MEMBER_NO)
	WHERE CINEMA_DEL_YN  = 'N'
	AND CINEMA_EV_DEL_YN = 'N' 
	AND CINEMA_NAME = #{cinemaName}
	ORDER BY CINEMA_EV_ENROLL_DATE DESC
	</select>
  	
  	<!--  영화관 댓글 삽입 -->
  	<insert id = "commentInsert">
  	INSERT INTO "CINEMA_EVALUATION"
	VALUES(SEQ_CINEMA_EV_NO.NEXTVAL, 
			#{memberNo},
			(SELECT CINEMA_NO FROM CINEMA WHERE CINEMA_NAME = #{cinemaName}),
			#{cinemaCommentType},
			#{cinemaCommentContent},
			#{cinemaGrade},
			SYSDATE,
			DEFAULT)
  	</insert>
  	

  	
  	<select id="getCinemaNoList"  resultType = "_integer">
      SELECT  CINEMA_NO
      FROM CINEMA
      WHERE CINEMA_DEL_YN = 'N' 
      AND  (CINEMA_SPECIAL_HALL LIKE '%' || '4DX' || '%')
  	</select>
  	
  
  	<!--  영화관 댓글 삭제  -->
  	<update id = "commentDelete">
	  	UPDATE CINEMA_EVALUATION
	  	SET CINEMA_EV_DEL_YN = 'Y'
	  	WHERE CINEMA_EV_NO = ${cinemaCommentNo}
  	</update>

  	
	<!-- 즐겨찾기 ON -->
	<insert id = "addFavorite">
		INSERT INTO CINEMA_LIKE 
		VALUES(SEQ_CINEMA_LIKE_NO.NEXTVAL, #{memberNo}, (SELECT CINEMA_NO 
														FROM CINEMA 
														WHERE CINEMA_NAME LIKE #{cinemaName}), DEFAULT, SYSDATE)
	</insert>

	<!-- 즐겨찾기 OFF -->
	<delete id = "delFavorite">
		DELETE FROM CINEMA_LIKE
		WHERE CINEMA_NO = (SELECT CINEMA_NO FROM CINEMA WHERE CINEMA_NAME LIKE #{cinemaName})
		AND  MEMBER_NO = #{memberNo}
	</delete>
	
	<!-- 즐겨찾기 조회 -->
	<select id = "favoriteCheck" resultType = "_int">
		SELECT COUNT(*)
		FROM CINEMA_LIKE 
		LEFT JOIN CINEMA  USING(CINEMA_NO)
		WHERE CINEMA_NAME = #{cinemaName} AND MEMBER_NO = #{memberNo}
	</select>
  	
  	
  	
  	<select id="selectCinemaComment" resultMap = "cinema_rm" >
		SELECT *
		FROM CINEMA_EVALUATION
		WHERE MEMBER_NO = #{memberNo}
	</select>
  	
  	
  	<!--  영화관 평점 ( 메뉴, 시설, 친절도)  -->
  	<select id = "sumCinemaGrade"  resultType = "_float">
		SELECT 
		<![CDATA[
		    CASE 
		        WHEN NVL(AVG(CINEMA_GRADE), 0) = 0 AND NVL(AVG(MENU_GRADE), 0) <> 0 THEN ROUND(NVL(AVG(MENU_GRADE), 0),1)
		        WHEN NVL(AVG(CINEMA_GRADE), 0) <> 0 AND NVL(AVG(MENU_GRADE), 0) = 0 THEN ROUND(NVL(AVG(CINEMA_GRADE), 0),1)
		        ELSE ROUND((NVL(AVG(CINEMA_GRADE), 0) + NVL(AVG(MENU_GRADE), 0)) / 2, 1)
		    END AS SUM_CINEMA_GRADE
		]]>
		FROM CINEMA
		     LEFT JOIN CINEMA_EVALUATION USING(CINEMA_NO)
		     LEFT JOIN MENU_STATUS USING(CINEMA_NO)
		     LEFT JOIN MENU_RECOMMEND USING(SNACK_CINEMA_NO)
		WHERE CINEMA_EV_DEL_YN ='N'
		GROUP BY CINEMA_NO
		HAVING CINEMA_NO = (SELECT CINEMA_NO
			  					   FROM CINEMA 
			  					   WHERE CINEMA_NAME = #{cinemaName})  
  	</select>
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	

</mapper>